// Time Complexity :O(m+n) + log(m+n)
// Space Complexity :O(m+n)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach: first i merged two arrays into one new array size as m+n (m is length of first array where as n is length of second array) then sorted later if the length of result array is odd then i take mid and return result[mid as median if it is not then i calculate mid and result[mid]+result[mid+1]/2 is become median.

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int[] result=new int[n1+n2];
        for(int i=0;i<n1;i++){ // O(m)
            result[i]=nums1[i];
        }
        for(int j=n1;j<result.length;j++){  //O(n)
              result[j]=nums2[j-n1];
        }
       Arrays.sort(result); //log(m+n)
       int low=0;
       int high=result.length-1;
       double re;
       if(result.length % 2 == 0){
           int mid=low+(high-low)/2;
           re=(result[mid]+result[mid+1])/2d;
       }else{
           int mid=low+(high-low)/2;
           re=result[mid];
       }
        return re;
    }
}

// Time Complexity :O(log(min(m,n))
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :no


// Your code here along with comments explaining your approach:here i have done binary search on smaller length array by doing  partiting on x parallay i have taken Y partition as well .finally if the length of two array is odd then i took max between left partion and min between right partion in simple words i have imagined this as one array if its od then i took just i take min of right two elements .here done binary search on one array only 

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1 = nums1.length;
        int n2 = nums2.length;
        if (n1 > n2) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int low = 0;
        int high = n1;
        while (low <= high) {
            int partx = low + (high - low) / 2;
            int partY = (n1 + n2) / 2 - partx;
            int Left1 = partx == 0 ? Integer.MIN_VALUE : nums1[partx - 1];
            int Left2 = partY == 0 ? Integer.MIN_VALUE : nums2[partY - 1];
            int right1 = partx == n1 ? Integer.MAX_VALUE : nums1[partx];
            int right2 = partY == n2 ? Integer.MAX_VALUE : nums2[partY];
            if (Left1 <= right2 && Left2 <= right1) {
                if ((n1 + n2) % 2 == 0) {
                    int leftfinal = Math.max(Left1, Left2);
                    int rightfinal = Math.min(right1, right2);
                    return (leftfinal + rightfinal) / 2d;
                } else {
                    return Math.min(right1, right2);
                }
            } else if (Left1 > right2) {
                high = partx - 1;

            } else if (Left2 > right1) {
                low = partx + 1;
            }
        }
        return 7d;

    }
}